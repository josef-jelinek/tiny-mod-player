package player.tinymod.client;

import android.os.Binder;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
import android.os.RemoteException;

public interface TinyModServiceInterface extends IInterface {
  public static abstract class Stub extends Binder implements TinyModServiceInterface {
    private static final String DESCRIPTOR = "player.tinymod.client.TinyModServiceInterface";
    private static final int TRANSACTION_clearPlaylist = IBinder.FIRST_CALL_TRANSACTION;
    private static final int TRANSACTION_addSongPlaylist = IBinder.FIRST_CALL_TRANSACTION + 1;
    private static final int TRANSACTION_playFile = IBinder.FIRST_CALL_TRANSACTION + 2;
    private static final int TRANSACTION_pause = IBinder.FIRST_CALL_TRANSACTION + 3;
    private static final int TRANSACTION_stop = IBinder.FIRST_CALL_TRANSACTION + 4;
    private static final int TRANSACTION_skipForward = IBinder.FIRST_CALL_TRANSACTION + 5;
    private static final int TRANSACTION_skipBack = IBinder.FIRST_CALL_TRANSACTION + 6;

    public Stub() {
      this.attachInterface(this, DESCRIPTOR);
    }

    public static TinyModServiceInterface asInterface(final IBinder obj) {
      if (obj == null)
        return null;
      final IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
      if (iin instanceof TinyModServiceInterface)
        return (TinyModServiceInterface)iin;
      return new TinyModServiceInterface.Stub.Proxy(obj);
    }

    public IBinder asBinder() {
      return this;
    }

    @Override
    public boolean
        onTransact(final int code, final Parcel data, final Parcel reply, final int flags)
            throws RemoteException {
      switch (code) {
      case INTERFACE_TRANSACTION:
        reply.writeString(DESCRIPTOR);
        return true;
      case TRANSACTION_clearPlaylist:
        data.enforceInterface(DESCRIPTOR);
        this.clear();
        reply.writeNoException();
        return true;
      case TRANSACTION_addSongPlaylist:
        data.enforceInterface(DESCRIPTOR);
        this.add(data.readString());
        reply.writeNoException();
        return true;
      case TRANSACTION_playFile:
        data.enforceInterface(DESCRIPTOR);
        this.play(data.readInt());
        reply.writeNoException();
        return true;
      case TRANSACTION_pause:
        data.enforceInterface(DESCRIPTOR);
        this.pause();
        reply.writeNoException();
        return true;
      case TRANSACTION_stop:
        data.enforceInterface(DESCRIPTOR);
        this.stop();
        reply.writeNoException();
        return true;
      case TRANSACTION_skipForward:
        data.enforceInterface(DESCRIPTOR);
        this.forward();
        reply.writeNoException();
        return true;
      case TRANSACTION_skipBack:
        data.enforceInterface(DESCRIPTOR);
        this.backward();
        reply.writeNoException();
        return true;
      }
      return super.onTransact(code, data, reply, flags);
    }

    private static class Proxy implements TinyModServiceInterface {
      private final IBinder mRemote;

      Proxy(final IBinder remote) {
        mRemote = remote;
      }

      public IBinder asBinder() {
        return mRemote;
      }

      //public String getInterfaceDescriptor() {
      //  return DESCRIPTOR;
      //}
      public void clear() throws RemoteException {
        final Parcel _data = Parcel.obtain();
        final Parcel _reply = Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          mRemote.transact(Stub.TRANSACTION_clearPlaylist, _data, _reply, 0);
          _reply.readException();
        } finally {
          _reply.recycle();
          _data.recycle();
        }
      }

      public void add(final String song) throws RemoteException {
        final Parcel _data = Parcel.obtain();
        final Parcel _reply = Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          _data.writeString(song);
          mRemote.transact(Stub.TRANSACTION_addSongPlaylist, _data, _reply, 0);
          _reply.readException();
        } finally {
          _reply.recycle();
          _data.recycle();
        }
      }

      public void play(final int position) throws RemoteException {
        final Parcel data = Parcel.obtain();
        final Parcel reply = Parcel.obtain();
        try {
          data.writeInterfaceToken(DESCRIPTOR);
          data.writeInt(position);
          mRemote.transact(Stub.TRANSACTION_playFile, data, reply, 0);
          reply.readException();
        } finally {
          reply.recycle();
          data.recycle();
        }
      }

      public void pause() throws RemoteException {
        final Parcel data = Parcel.obtain();
        final Parcel reply = Parcel.obtain();
        try {
          data.writeInterfaceToken(DESCRIPTOR);
          mRemote.transact(Stub.TRANSACTION_pause, data, reply, 0);
          reply.readException();
        } finally {
          reply.recycle();
          data.recycle();
        }
      }

      public void stop() throws RemoteException {
        final Parcel _data = Parcel.obtain();
        final Parcel _reply = Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          mRemote.transact(Stub.TRANSACTION_stop, _data, _reply, 0);
          _reply.readException();
        } finally {
          _reply.recycle();
          _data.recycle();
        }
      }

      public void forward() throws RemoteException {
        final Parcel _data = Parcel.obtain();
        final Parcel _reply = Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          mRemote.transact(Stub.TRANSACTION_skipForward, _data, _reply, 0);
          _reply.readException();
        } finally {
          _reply.recycle();
          _data.recycle();
        }
      }

      public void backward() throws RemoteException {
        final Parcel _data = Parcel.obtain();
        final Parcel _reply = Parcel.obtain();
        try {
          _data.writeInterfaceToken(DESCRIPTOR);
          mRemote.transact(Stub.TRANSACTION_skipBack, _data, _reply, 0);
          _reply.readException();
        } finally {
          _reply.recycle();
          _data.recycle();
        }
      }
    }
  }

  public void clear() throws RemoteException;

  public void add(String song) throws RemoteException;

  public void play(int position) throws RemoteException;

  public void pause() throws RemoteException;

  public void stop() throws RemoteException;

  public void forward() throws RemoteException;

  public void backward() throws RemoteException;
}
