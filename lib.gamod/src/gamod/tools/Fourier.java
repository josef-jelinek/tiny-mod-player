package gamod.tools;

import static java.lang.Math.*;

public final class Fourier {
  /*
  For the forward time2freq FFT, fixed scaling is performed to prevent
  arithmetic overflow, and to map a 0dB sine wave (amplitude = 32767)
  to two -6dB freq coefficients. The return value is 0 (-1 for error).

  For the inverse freq2time FFT, fixed scaling cannot be done, as two 0dB
  coefficients added would exceed the 32k range.
  Thus, a variable scaling is performed. If e.g. 3 is returned, each value
  must be multiplied by 8 (2^3) for proper scaling that may not fit to 32k.
  */

  private short[] sintab = { // 3/4 of short-range sine period
        0,    201,    402,    603,    804,   1005,   1206,   1406,
     1607,   1808,   2009,   2209,   2410,   2610,   2811,   3011,
     3211,   3411,   3611,   3811,   4011,   4210,   4409,   4608,
     4807,   5006,   5205,   5403,   5601,   5799,   5997,   6195,
     6392,   6589,   6786,   6982,   7179,   7375,   7571,   7766,
     7961,   8156,   8351,   8545,   8739,   8932,   9126,   9319,
     9511,   9703,   9895,  10087,  10278,  10469,  10659,  10849,
    11038,  11227,  11416,  11604,  11792,  11980,  12166,  12353,
    12539,  12724,  12909,  13094,  13278,  13462,  13645,  13827,
    14009,  14191,  14372,  14552,  14732,  14911,  15090,  15268,
    15446,  15623,  15799,  15975,  16150,  16325,  16499,  16672,
    16845,  17017,  17189,  17360,  17530,  17699,  17868,  18036,
    18204,  18371,  18537,  18702,  18867,  19031,  19194,  19357,
    19519,  19680,  19840,  20000,  20159,  20317,  20474,  20631,
    20787,  20942,  21096,  21249,  21402,  21554,  21705,  21855,
    22004,  22153,  22301,  22448,  22594,  22739,  22883,  23027,
    23169,  23311,  23452,  23592,  23731,  23869,  24006,  24143,
    24278,  24413,  24546,  24679,  24811,  24942,  25072,  25201,
    25329,  25456,  25582,  25707,  25831,  25954,  26077,  26198,
    26318,  26437,  26556,  26673,  26789,  26905,  27019,  27132,
    27244,  27355,  27466,  27575,  27683,  27790,  27896,  28001,
    28105,  28208,  28309,  28410,  28510,  28608,  28706,  28802,
    28897,  28992,  29085,  29177,  29268,  29358,  29446,  29534,
    29621,  29706,  29790,  29873,  29955,  30036,  30116,  30195,
    30272,  30349,  30424,  30498,  30571,  30643,  30713,  30783,
    30851,  30918,  30984,  31049,  31113,  31175,  31236,  31297,
    31356,  31413,  31470,  31525,  31580,  31633,  31684,  31735,
    31785,  31833,  31880,  31926,  31970,  32014,  32056,  32097,
    32137,  32176,  32213,  32249,  32284,  32318,  32350,  32382,
    32412,  32441,  32468,  32495,  32520,  32544,  32567,  32588,
    32609,  32628,  32646,  32662,  32678,  32692,  32705,  32717,
    32727,  32736,  32744,  32751,  32757,  32761,  32764,  32766,
    32767,  32766,  32764,  32761,  32757,  32751,  32744,  32736,
    32727,  32717,  32705,  32692,  32678,  32662,  32646,  32628,
    32609,  32588,  32567,  32544,  32520,  32495,  32468,  32441,
    32412,  32382,  32350,  32318,  32284,  32249,  32213,  32176,
    32137,  32097,  32056,  32014,  31970,  31926,  31880,  31833,
    31785,  31735,  31684,  31633,  31580,  31525,  31470,  31413,
    31356,  31297,  31236,  31175,  31113,  31049,  30984,  30918,
    30851,  30783,  30713,  30643,  30571,  30498,  30424,  30349,
    30272,  30195,  30116,  30036,  29955,  29873,  29790,  29706,
    29621,  29534,  29446,  29358,  29268,  29177,  29085,  28992,
    28897,  28802,  28706,  28608,  28510,  28410,  28309,  28208,
    28105,  28001,  27896,  27790,  27683,  27575,  27466,  27355,
    27244,  27132,  27019,  26905,  26789,  26673,  26556,  26437,
    26318,  26198,  26077,  25954,  25831,  25707,  25582,  25456,
    25329,  25201,  25072,  24942,  24811,  24679,  24546,  24413,
    24278,  24143,  24006,  23869,  23731,  23592,  23452,  23311,
    23169,  23027,  22883,  22739,  22594,  22448,  22301,  22153,
    22004,  21855,  21705,  21554,  21402,  21249,  21096,  20942,
    20787,  20631,  20474,  20317,  20159,  20000,  19840,  19680,
    19519,  19357,  19194,  19031,  18867,  18702,  18537,  18371,
    18204,  18036,  17868,  17699,  17530,  17360,  17189,  17017,
    16845,  16672,  16499,  16325,  16150,  15975,  15799,  15623,
    15446,  15268,  15090,  14911,  14732,  14552,  14372,  14191,
    14009,  13827,  13645,  13462,  13278,  13094,  12909,  12724,
    12539,  12353,  12166,  11980,  11792,  11604,  11416,  11227,
    11038,  10849,  10659,  10469,  10278,  10087,   9895,   9703,
     9511,   9319,   9126,   8932,   8739,   8545,   8351,   8156,
     7961,   7766,   7571,   7375,   7179,   6982,   6786,   6589,
     6392,   6195,   5997,   5799,   5601,   5403,   5205,   5006,
     4807,   4608,   4409,   4210,   4011,   3811,   3611,   3411,
     3211,   3011,   2811,   2610,   2410,   2209,   2009,   1808,
     1607,   1406,   1206,   1005,    804,    603,    402,    201,
        0,   -201,   -402,   -603,   -804,  -1005,  -1206,  -1406,
    -1607,  -1808,  -2009,  -2209,  -2410,  -2610,  -2811,  -3011,
    -3211,  -3411,  -3611,  -3811,  -4011,  -4210,  -4409,  -4608,
    -4807,  -5006,  -5205,  -5403,  -5601,  -5799,  -5997,  -6195,
    -6392,  -6589,  -6786,  -6982,  -7179,  -7375,  -7571,  -7766,
    -7961,  -8156,  -8351,  -8545,  -8739,  -8932,  -9126,  -9319,
    -9511,  -9703,  -9895, -10087, -10278, -10469, -10659, -10849,
   -11038, -11227, -11416, -11604, -11792, -11980, -12166, -12353,
   -12539, -12724, -12909, -13094, -13278, -13462, -13645, -13827,
   -14009, -14191, -14372, -14552, -14732, -14911, -15090, -15268,
   -15446, -15623, -15799, -15975, -16150, -16325, -16499, -16672,
   -16845, -17017, -17189, -17360, -17530, -17699, -17868, -18036,
   -18204, -18371, -18537, -18702, -18867, -19031, -19194, -19357,
   -19519, -19680, -19840, -20000, -20159, -20317, -20474, -20631,
   -20787, -20942, -21096, -21249, -21402, -21554, -21705, -21855,
   -22004, -22153, -22301, -22448, -22594, -22739, -22883, -23027,
   -23169, -23311, -23452, -23592, -23731, -23869, -24006, -24143,
   -24278, -24413, -24546, -24679, -24811, -24942, -25072, -25201,
   -25329, -25456, -25582, -25707, -25831, -25954, -26077, -26198,
   -26318, -26437, -26556, -26673, -26789, -26905, -27019, -27132,
   -27244, -27355, -27466, -27575, -27683, -27790, -27896, -28001,
   -28105, -28208, -28309, -28410, -28510, -28608, -28706, -28802,
   -28897, -28992, -29085, -29177, -29268, -29358, -29446, -29534,
   -29621, -29706, -29790, -29873, -29955, -30036, -30116, -30195,
   -30272, -30349, -30424, -30498, -30571, -30643, -30713, -30783,
   -30851, -30918, -30984, -31049, -31113, -31175, -31236, -31297,
   -31356, -31413, -31470, -31525, -31580, -31633, -31684, -31735,
   -31785, -31833, -31880, -31926, -31970, -32014, -32056, -32097,
   -32137, -32176, -32213, -32249, -32284, -32318, -32350, -32382,
   -32412, -32441, -32468, -32495, -32520, -32544, -32567, -32588,
   -32609, -32628, -32646, -32662, -32678, -32692, -32705, -32717,
   -32727, -32736, -32744, -32751, -32757, -32761, -32764, -32766,
  };

  private int fixFFT(short[] a, int N, int m, boolean inverse) {
    int n = 1 << m;
    if (n > sintab.length)
      return -1;
    shuffle(a, N, n);
    int l = 1;
    int k = 9; // log2(sintab.length) - 1;
    boolean shift;
    int scale = 0;
    while (l < n) {
      if (inverse) {
        shift = false;
        for (int i = 0; i < n; i++) {
          int j = a[i + N];
          if (j < 0)
            j = -j;
          m = a[i];
          if (m < 0)
            m = -m;
          if (j > 16383 || m > 16383) {
            shift = true;
            break;
          }
        }
        if (shift)
          ++scale;
      } else {
        shift = true;
      }
      int istep = l << 1;
      for (int ii = 0; ii < l; ii++) {
        int j = ii << k;
        short wr =  sintab[j + sintab.length / 4];
        short wi = (short)-sintab[j];
        if (inverse)
          wi = (short)-wi;
        if (shift) {
          wr >>= 1;
          wi >>= 1;
        }
        for (int i = ii; i < n; i += istep) {
          j = i + l;
          short tr = (short)(fixMulScale(wr, a[N + j]) - fixMulScale(wi, a[j]));
          short ti = (short)(fixMulScale(wr, a[j]) + fixMulScale(wi, a[N + j]));
          short qr = a[N + i];
          short qi = a[i];
          if (shift) {
            qr >>= 1;
            qi >>= 1;
          }
          a[N + j] = (short)(qr - tr);
          a[j] = (short)(qi - ti);
          a[N + i] = (short)(qr + tr);
          a[i] = (short)(qi + ti);
        }
      }
      k -= 1;
      l = istep;
    }
    return scale;
  }

  private int fixMulScale(int a, int b) {
    int c = a * b >> 14;
    return (c >> 1) + (c & 1);
  }

  private void shuffle(short[] a, int half_a, int n) {
    int mr = 0;
    for (int i = 1; i < n; i++) {
      int t = n >> 1;
      while (mr + t >= n)
        t >>= 1;
      mr = (mr & (t - 1)) + t;
      if (mr > i) {
        short tr = a[half_a + i];
        a[half_a + i] = a[half_a + mr];
        a[half_a + mr] = tr;
        short ti = a[i];
        a[i] = a[mr];
        a[mr] = ti;
      }
    }
  }

  // FFT on array of real numbers
  int fixFFTr(short a[], int m, boolean inverse) {
    if (a.length != 1 << m)
      return -1;
    int half_a = 1 << (m - 1), scale = 0;
    if (inverse)
      scale = fixFFT(a, half_a, m - 1, inverse);
    for (int i = 1; i < half_a; i += 2) {
      short t = a[half_a + i - 1];
      a[half_a + i - 1] = a[i];
      a[i] = t;
    }
    if (!inverse)
      scale = fixFFT(a, half_a, m - 1, inverse);
    return scale;
  }
   
  // DFT
  public static void DFT(int dir, int n, double[] ar, double[] ai, double[] br, double[] bi) {
    double f = -dir * 2.0 * PI / n;
    for (int i = 0; i < n; i++) {
      br[i] = 0;
      bi[i] = 0;
      double arg = f * i;
      for (int k = 0; k < n; k++) {
        double cosarg = cos(k * arg);
        double sinarg = sin(k * arg);
        br[i] += ar[k] * cosarg - ai[k] * sinarg;
        bi[i] += ar[k] * sinarg + ai[k] * cosarg;
      }
    }
    normalize(dir, n, br, bi);
  }

  // FFT using sin function
  public static void sinFFT(int dir, int n, double[] ar, double[] ai, double[] br, double[] bi) {
    shuffle(n, ar, ai, br, bi);
    for (int mmax = 1; mmax < n; mmax <<= 1) {
      double theta = dir * PI / mmax;
      double sinhalftheta = sin(0.5 * theta);
      FFTLoop(n, mmax, br, bi, -2.0 * sinhalftheta * sinhalftheta, sin(theta));
    }
    normalize(dir, n, br, bi);
  }

  // FFT using sqrt function
  public static void sqrtFFT(int dir, int n, double[] ar, double[] ai, double[] br, double[] bi) {
    shuffle(n, ar, ai, br, bi);
    double wpr = -1.0; 
    double wpi = 0.0;
    for (int mmax = 1; mmax < n; mmax <<= 1) {
      FFTLoop(n, mmax, br, bi, wpr, wpi);
      wpi = -dir * sqrt((1.0 - wpr) / 2.0);
      wpr = sqrt((1.0 + wpr) / 2.0);
    }
    normalize(dir, n, br, bi);
  }

  private static void FFTLoop(int n, int mmax, double[] ar, double[] ai, double wpr, double wpi) {
    double wr = 1.0;
    double wi = 0.0;
    int istep = mmax << 1;
    for (int m = 0; m < mmax; m++) {
      for (int i = m; i < n; i += istep) {
        int j = i + mmax;
        double tr = wr * ar[j] - wi * ai[j];
        double ti = wr * ai[j] + wi * ar[j];
        ar[j] = ar[i] - tr;
        ai[j] = ai[i] - ti;
        ar[i] += tr;
        ai[i] += ti;
      }
      double wtr = wr;
      wr += wr * wpr - wi * wpi;
      wi += wi * wpr + wtr * wpi;
    }
  }

  private static void shuffle(int n, double[] ar, double[] ai, double[] br, double[] bi) {
    int n2 = n >> 1;
    for (int i = 0, j = 0; i < n; i++) {
      if (i <= j) {
        br[i] = ar[j];
        bi[i] = ai[j];
        br[j] = ar[i];
        bi[j] = ai[i];
      }
      int k = n2;
      while (k > 0 && k <= j) {
        j -= k;
        k >>= 1;
      }
      j += k;
    }
  }

  private static void normalize(int dir, int n, double[] ar, double[] ai) {
    if (dir == -1) {
      for (int i = 0; i < n; i++) {
        ar[i] /= n;
        ai[i] /= n;
      }
    }
  }
}
